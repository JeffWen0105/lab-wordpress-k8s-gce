
- name: Install docker
  apt:
    update_cache: yes
    state: present
    name: 
      - docker.io
      - docker-compose 
      - apt-transport-https
      - ca-certificates 
      - curl
      - nfs-common

- name: prepare env
  shell: |
    cat <<EOF | tee /etc/modules-load.d/k8s.conf
    br_netfilter
    EOF
    cat <<EOF | tee /etc/sysctl.d/k8s.conf
    net.bridge.bridge-nf-call-ip6tables = 1
    net.bridge.bridge-nf-call-iptables = 1
    EOF
    sysctl --system
    curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
    echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | tee /etc/apt/sources.list.d/kubernetes.list
    cat <<EOF | tee /etc/docker/daemon.json
    {
      "exec-opts": ["native.cgroupdriver=systemd"],
      "log-driver": "json-file",
      "log-opts": {
        "max-size": "100m"
      },
      "storage-driver": "overlay2"
    }
    EOF
    mkdir -p /data/
    cat <<EOF | tee  /etc/exports
    /data *(rw,sync,no_root_squash)
    EOF
    chmod 777 /data

- name: Install k8s
  apt:
    update_cache: yes
    state: present
    name: 
      - kubelet=1.22.0-00
      - kubeadm=1.22.0-00
      - kubectl=1.22.0-00

- name: Restart docker
  systemd:
    name: docker
    state: restarted

- name: Kubeadmin init - only master
  shell: |
    kubeadm init --service-cidr 10.96.0.0/12 --pod-network-cidr 10.244.0.0/16 --apiserver-advertise-address 0.0.0.0 
    mkdir -p /root/.kube
    cp  /etc/kubernetes/admin.conf /root/.kube/config
    chown $(id -u):$(id -g) /root/.kube/config
    kubeadm token create --print-join-command > /tmp/.token
    kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml
  when: 
    - ansible_facts['hostname'] == 'master'

- name: Get token
  fetch:
    src: /tmp/.token
    dest: ./token
    flat: yes
  when: 
    - ansible_facts['hostname'] == 'master'  

- name: Send token
  copy:
    src: ./token
    dest: /tmp/.token
  when: 
    - ansible_facts['hostname'] != 'master' 

- name: Join to master
  shell: |
    bash /tmp/.token
  when: 
    - ansible_facts['hostname'] != 'master'  

- name: Install NFS Server &&  Nginx
  apt:
    update_cache: yes
    state: present
    name:
      - nginx
      - nfs-kernel-server
  when:
    - ansible_facts['hostname'] == 'master'

- name: Master IP
  copy:
    content: "{{ ansible_facts['default_ipv4']['address'] }}"
    dest: /tmp/master_ip
  when: 
    - ansible_facts['hostname'] == 'master'  

- name:  Get Master IP
  fetch:
    src: /tmp/master_ip
    dest: /tmp/master_ip
    flat: yes
  when:
    - ansible_facts['hostname'] == 'master'

- name: Send Master IP
  copy:
    src: /tmp/master_ip
    dest: /tmp/master_ip
  when: 
    - ansible_facts['hostname'] != 'master' 

- name: mount NFS
  shell: |
    ip=`cat /tmp/master_ip`
    mount ${ip}:/data /data
  when: 
    - ansible_facts['hostname'] != 'master'       

- name: Apply app
  shell: |
    mkdir -p /lab && chmod -R 770 /lab
    wget https://how64bit.com/lab-wordpress-k8s-ec2/db.yml -P /lab
    wget https://how64bit.com/lab-wordpress-k8s-ec2/wp.yml -P /lab
    kubectl apply -f /lab/.
  when:
    - ansible_facts['hostname'] == 'master'

    
- name: Nginx config
  template:
    src: templates/host.j2
    dest: /etc/nginx/sites-enabled/default
  when:
    - ansible_facts['hostname'] == 'master'

- name: Restart Nginx
  systemd:
    name: nginx
    state: restarted
  when:
    - ansible_facts['hostname'] == 'master'

- name: Show K8s INFO
  shell: |
    kubectl get node -o wide
    kubectl get all

- name: Waiting for WordPress WebSite up...
  uri:
    url: http://{{ ansible_facts['default_ipv4']['address']  }}/ABC
    status_code: 200
  register: result
  until: result.status == 200
  retries: 300
  delay: 1
